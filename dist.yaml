openapi: 3.0.0
info:
  description: |
    Pinterest CM sv-cl API
  version: 1.1.0
  title: Pinterbest
  license:
    name: Pinterbest
    url: 'https://github.com/frontend-park-mail-ru/2021_1_Code_Magicians'
servers:
  - url: 'http://52.59.228.167:8081'
    description: Main production server
tags:
  - name: auth
    description: Authorization operations
  - name: pin
    description: Everything about pins
  - name: board
    description: Everything about boards
  - name: profile
    description: Operations about profile
  - name: comments
    description: Operations about comments
paths:
  /auth/signup:
    post:
      operationId: signupUser
      tags:
        - auth
      summary: Create profile
      description: This can only be done by the unlogged user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              description: New profile object
        required: true
      responses:
        '201':
          description: Successfully created profile
        '400':
          description: Invalid credentials supplied
        '403':
          description: You are already authorized. Log out first
        '409':
          description: User already exists
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
        required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid username or password supplied
        '401':
          description: Wrong password
        '403':
          description: You are already authorized. Log out first
        '404':
          description: User not found
  /auth/logout:
    post:
      operationId: logoutUser
      tags:
        - auth
      summary: Log out from current session
      responses:
        '204':
          description: Logged out
        '401':
          description: User unauthorized
  /auth/check:
    get:
      operationId: checkUserAuth
      tags:
        - auth
      summary: Checks if current user is logged in
      responses:
        '204':
          description: User is authorized
        '401':
          description: User is unauthorized
  /profile:
    get:
      operationId: getSelfProfile
      tags:
        - profile
      summary: Get profile of the current user
      responses:
        '200':
          description: Profile found
          content:
            application/json:
              schema:
                properties:
                  ID:
                    type: integer
                  username:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  avatarLink:
                    type: string
                  followers:
                    type: integer
                  following:
                    type: integer
                  pins:
                    type: integer
        '401':
          description: User unauthorized
  '/profile/{ID_or_username}':
    get:
      operationId: getProfileByUsernameOrID
      tags:
        - profile
      summary: Get profile by username OR ID
      parameters:
        - name: ID_or_username
          in: path
          schema:
            type: string
          description: That could be username !OR! userID
          required: true
      responses:
        '200':
          description: Profile found
          content:
            application/json:
              schema:
                properties:
                  ID:
                    type: integer
                  username:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  avatarLink:
                    type: string
                  followed:
                    type: boolean
                  followers:
                    type: integer
                  following:
                    type: integer
                  pins:
                    type: integer
        '400':
          description: Invalid ID or username supplied
        '404':
          description: Profile not found
  /profile/password:
    put:
      operationId: changeUserPassword
      tags:
        - profile
      summary: Update user password
      description: This can only be done by authorized user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
        description: New password
        required: true
      responses:
        '204':
          description: Successfully updated password
        '400':
          description: Invalid password data supplied
        '401':
          description: User unauthorized
  /profile/edit:
    put:
      operationId: editProfile
      tags:
        - profile
      summary: Update profile
      description: This can only be done by authorized user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
                email:
                  type: string
                  format: email
        description: Updated user profile
        required: true
      responses:
        '204':
          description: Successfully updated profile
        '400':
          description: Invalid data supplied
        '401':
          description: User unauthorized
        '404':
          description: Profile not found
  /profile/avatar:
    put:
      operationId: updateProfileAvatar
      tags:
        - profile
      summary: Post user avatar
      description: This can only bo done by authorized user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatarImage:
                  type: string
                  format: binary
        description: >-
          Avatar binary image. I'm not sure that it will be only png. Need to
          check that.
        required: true
      responses:
        '204':
          description: Successfully added avatar
        '400':
          description: Invalid image supplied
        '401':
          description: User unauthorized
  /profile/delete:
    delete:
      operationId: deleteSelfProfile
      tags:
        - profile
      summary: Delete profile
      description: This can only be done by authorized user
      responses:
        '204':
          description: Succesful operation
        '401':
          description: User unauthorized
  '/follow/{ID_or_username}':
    post:
      operationId: followProfile
      tags:
        - profile
      summary: Follow foreign profile
      description: This can only be done by authorized user
      parameters:
        - name: ID_or_username
          in: path
          schema:
            type: string
          description: The ID or username of profile to follow
          required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID or username supplied
        '401':
          description: User unauthorized
        '404':
          description: Target profile not found
        '409':
          description: Already following
    delete:
      operationId: unfollowProfile
      tags:
        - profile
      summary: Stop following foreign profile
      description: This can only be done by authorized user
      parameters:
        - name: ID_or_username
          in: path
          schema:
            type: string
          description: The ID or username of profile to unfollow
          required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID or username supplied
        '401':
          description: User unauthorized
        '404':
          description: Target profile not found
        '409':
          description: Already not following
  /board:
    post:
      operationId: createBoard
      tags:
        - board
      summary: Create new board
      description: This can only bo done by authorized user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                description:
                  type: string
        description: New board object
        required: true
      responses:
        '201':
          description: Successfully created board
          content:
            application/json:
              schema:
                properties:
                  ID:
                    type: integer
        '400':
          description: Failed to create board due to invalid propreties
        '401':
          description: User unauthorized
  '/board/{boardID}':
    get:
      operationId: getBoardByID
      tags:
        - board
      summary: Get board by ID
      parameters:
        - name: boardID
          in: path
          description: The ID that needs to be fetched
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '400':
          description: Invalid board ID supplied
        '404':
          description: Board not found
    delete:
      operationId: deleteBoardByID
      tags:
        - board
      summary: Delete board
      description: This can only be done by authorized user
      parameters:
        - name: boardID
          in: path
          schema:
            type: integer
            format: int
          description: The ID of board that needs to be deleted
          required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid board ID supplied
        '401':
          description: User unauthorized
        '403':
          description: You can't delet foreign board!
        '404':
          description: Board not found
        '409':
          description: Conflict happend while deleting entity
  '/boards/{authorID}':
    get:
      operationId: getProfileBoards
      tags:
        - board
      summary: Get boards by author ID
      parameters:
        - name: authorID
          in: path
          description: The boards' author ID
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  boards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Board'
        '400':
          description: Invalid author ID supplied
        '404':
          description: Boards not found
  /pin:
    post:
      operationId: createPin
      tags:
        - pin
      summary: Create new pin
      description: This can only bo done by authorized user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pinInfo:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    tags:
                      type: array
                      items:
                        type: string
                    boardID:
                      type: integer
                pinImage:
                  type: string
                  format: binary
        description: New pin
        required: true
      responses:
        '201':
          description: Successfully created pin
          content:
            application/json:
              schema:
                properties:
                  ID:
                    type: integer
        '400':
          description: Failed to creaet pin due to invalid data
        '403':
          description: Can't create pin while not logged in
        '404':
          description: Board didn't found to place pin
  '/pin/{pinID}':
    get:
      operationId: getPinByID
      tags:
        - pin
      summary: Get pin by ID
      parameters:
        - name: pinID
          in: path
          schema:
            type: integer
            format: int
          description: The ID that needs to be fetched
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pin'
        '400':
          description: Invalid pin ID supplied
        '404':
          description: Pin not found
    delete:
      operationId: deletePinByID
      tags:
        - pin
      summary: Delete pin by ID
      description: This can only be done by the logged in profile
      parameters:
        - name: pinID
          in: path
          schema:
            type: integer
            format: int
          description: The ID of pin that needs to be deleted
          required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid pin ID supplied
        '401':
          description: User unauthorized
        '403':
          description: You can't delete foreign pin!
        '404':
          description: Pin not found
        '409':
          description: Conflict happend while deleting entity
  '/pins/{boardID}':
    get:
      operationId: getPinsByBoardID
      tags:
        - pin
      summary: Get pins by board id of their board
      parameters:
        - name: boardID
          in: path
          schema:
            type: integer
            format: int
          description: The ID of target board
          required: true
        - name: pinNumber
          in: query
          schema:
            type: integer
            format: int
          description: 'Number of pins to fetch. If not supplied, try to fetch all'
          required: false
        - name: sortingCrit
          in: query
          schema:
            type: string
          description: >-
            The identifier of criterion to provide next pinNumber pins. If not
            supplied sort by id
          required: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  pins:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pin'
        '400':
          description: Invalid board ID supplied
        '404':
          description: Board not found
  '/pins/feed/{pinNumber}':
    get:
      operationId: getPinsFeed
      tags:
        - pin
      summary: Get pins feed to current user(if authorized)
      parameters:
        - name: pinsNumber
          in: path
          schema:
            type: integer
            format: int
          description: Max number of pins to fetch
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  pins:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pin'
  '/comment/{pinID}':
    post:
      operationId: addComment
      tags:
        - comment
      summary: Post new comment to pin
      description: This can only be done by authorized user
      parameters:
        - name: pinID
          in: path
          schema:
            type: integer
            format: int
          description: Pin ID to add a comment
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
        description: Comment details. Only text for now
        required: true
      responses:
        '201':
          description: Successfully added comment
        '400':
          description: Invalid pin ID or other data(text) supplied
        '401':
          description: User unauthorized
        '404':
          description: Pin not found
  '/comments/{pinID}':
    get:
      operationId: getCommentsByPin
      tags:
        - comment
      summary: Get comments by pin ID
      parameters:
        - name: pinID
          in: path
          schema:
            type: integer
            format: int
          description: Pin ID to fetch it's comments
          required: true
      responses:
        '200':
          description: >-
            Successful operation. If there's no comments, should send empty(!)
            array
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid pin ID supplied
        '404':
          description: Pin not found
  '/notifications/read/{notificationID}':
    put:
      operationId: markNotificationRead
      tags:
        - notifications
      description: This can only bo done by authorized user
      parameters:
        - name: notificationID
          in: path
          schema:
            type: integer
            format: int
          description: The ID of read notification
          required: true
      responses:
        '204':
          description: Marked as read
        '401':
          description: Unauthorized
        '403':
          description: Foreign notification
        '404':
          description: Notification not found
        '409':
          description: Already marked
  /csrf:
    get:
      operationId: getCSRFToken
      tags:
        - CSRF
      summary: Get CSRF
      responses:
        '204':
          description: Done
components:
  schemas:
    Board:
      type: object
      properties:
        ID:
          type: integer
          format: int
        userID:
          type: integer
          format: int
        title:
          type: string
        description:
          type: string
        avatarLink:
          type: string
      required:
        - id
        - title
    Pin:
      type: object
      properties:
        ID:
          type: integer
          format: int
        boardID:
          type: integer
          format: int
        userID:
          type: integer
          format: int
        title:
          type: string
        description:
          type: string
        imageLink:
          type: string
        relatedTagIDs:
          type: array
          items:
            type: string
      required:
        - id
        - title
        - boardID
        - imageLink
    Comment:
      type: object
      properties:
        ID:
          type: integer
          format: int
        userID:
          type: integer
          format: int
        pinID:
          type: integer
          format: int
        addingTime:
          type: string
          format: date-time
        text:
          type: string
