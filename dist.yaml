openapi: 3.0.0
info:
  description: |
    Pinterest CM sv-cl API
  version: 1.0.6
  title: Pinterbest
  license:
    name: Pinterbest
    url: 'https://github.com/frontend-park-mail-ru/2021_1_Code_Magicians'
servers:
  - url: 'http://52.59.228.167:8080'
    description: Main production server
tags:
  - name: auth
    description: Authorization operations
  - name: pin
    description: Everything about pins
  - name: board
    description: Everything about boards
  - name: profile
    description: Operations about profile
paths:
  /auth/signup:
    post:
      operationId: signupUser
      tags:
        - auth
      summary: Create profile
      description: This can only be done by the unlogged user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              description: Created profile object
        required: true
      responses:
        '201':
          description: successfully created profile
        '400':
          description: invalid credentials supplied
        '403':
          description: you are already authorized. Log out first
        '409':
          description: user already exists
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username or password supplied
        '403':
          description: you are already authorized. Log out first
  /auth/logout:
    post:
      operationId: logoutUser
      tags:
        - auth
      summary: Log out from current session
      responses:
        '200':
          description: logged out
        '401':
          description: unauthorized
  /auth/check:
    get:
      operationId: checkUserAuth
      tags:
        - auth
      summary: Checks if current user is logged in
      responses:
        '200':
          description: user is authorized
        '401':
          description: user is unauthorized
  /profile:
    get:
      operationId: getSelfProfile
      tags:
        - profile
      summary: Get profile of the current user
      responses:
        '200':
          description: profile found
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  avatarLink:
                    type: string
        '401':
          description: user is not authorized
  '/profile/{ID_or_username}':
    get:
      operationId: getProfileByUsernameOrID
      tags:
        - profile
      summary: Get profile by username OR ID
      parameters:
        - name: ID_or_username
          in: path
          description: That could be username !OR! userID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: profile found
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  avatarLink:
                    type: string
        '400':
          description: Invalid username supplied
        '404':
          description: Profile not found
  /profile/password:
    put:
      operationId: changeUserPassword
      tags:
        - profile
      summary: Update user password
      description: This can only be done by authorized user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: successfully updated password
        '401':
          description: unauthorized
  /profile/edit:
    put:
      operationId: editProfile
      tags:
        - profile
      summary: Update profile
      description: This can only be done by authorized user
      responses:
        '200':
          description: successfully updated profile
        '401':
          description: unauthorized
        '409':
          description: update conflict
      requestBody:
        content:
          application/json:
            schema:
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
                email:
                  type: string
                  format: email
                avatar:
                  type: string
                  format: binary
        description: Updated user object
        required: true
  /profile/delete:
    delete:
      operationId: deleteSelfProfile
      tags:
        - profile
      summary: Delete profile
      description: This can only be done by authorized user
      responses:
        '200':
          description: Profile deleted successfully
        '401':
          description: unauthorized
  /board:
    post:
      operationId: createBoard
      tags:
        - board
      summary: Create new board
      description: This can only bo done by authorized user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                description:
                  type: string
        description: Created board object
        required: true
      responses:
        '201':
          description: successfully created board
        '400':
          description: failed to create board
        '403':
          description: unauthorized attempt to create board
  '/board/{boardID}':
    get:
      operationId: getBoardByID
      tags:
        - board
      summary: Get board by ID
      parameters:
        - name: boardID
          in: path
          description: The ID that needs to be fetched
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '400':
          description: Invalid board ID supplied
        '404':
          description: Board not found
    delete:
      operationId: deleteBoardByID
      tags:
        - board
      summary: Delete board
      description: This can only be done by authorized user
      parameters:
        - name: boardID
          in: path
          description: The ID of board that needs to be deleted
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: Board deleted successfully
        '400':
          description: Invalid board ID supplied
        '403':
          description: you can't delet foreign board!
        '404':
          description: Board not found
        '409':
          description: conflict happend while deleting entity
  '/boards/{authorID}':
    get:
      operationId: getProfileBoards
      tags:
        - board
      summary: Get boards by author ID
      parameters:
        - name: authorID
          in: path
          description: The boards' author ID
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  boards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Board'
        '400':
          description: Invalid author ID supplied
        '404':
          description: Boards not found
  /pin:
    post:
      operationId: createPin
      tags:
        - pin
      summary: Create new pin
      description: This can only bo done by authorized user
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                pinImage:
                  type: string
                  format: binary
                boardID:
                  type: integer
        description: Created pin
        required: true
      responses:
        '201':
          description: successfully created pin
        '400':
          description: failed to creaet pin
        '403':
          description: can't create pin while not logged in
        '404':
          description: board didn't found to place pin
  '/pin/{pinID}':
    get:
      operationId: getPinByID
      tags:
        - pin
      summary: Get pin by ID
      parameters:
        - name: pinID
          in: path
          description: The ID that needs to be fetched
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pin'
        '400':
          description: Invalid pin ID supplied
        '404':
          description: Pin not found
    delete:
      operationId: deletePinByID
      tags:
        - pin
      summary: Delete pin by ID
      description: This can only be done by the logged in profile
      parameters:
        - name: pinID
          in: path
          description: The ID of pin that needs to be deleted
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: Pin deleted successfully
        '400':
          description: Invalid pin ID supplied
        '403':
          description: you can't delete foreign pin!
        '404':
          description: Pin not found
        '409':
          description: conflict happend while deleting entity
  '/pins/{boardID}':
    get:
      operationId: getPinsByBoardID
      tags:
        - board
        - pin
      summary: Get pins by board id of their board
      parameters:
        - name: boardID
          in: path
          description: The ID of target board
          required: true
          schema:
            type: integer
            format: int
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pinNumber:
                  type: integer
                  description: Number of pins to fetch
                sortingCrit:
                  type: string
                  description: The identifier of criterion to provide next pinNumber pins
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Board'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Pin'
        '400':
          description: Invalid board ID supplied
        '404':
          description: Board not found
components:
  schemas:
    Board:
      type: object
      properties:
        id:
          type: integer
          format: int
        authorID:
          type: integer
          format: int
        title:
          type: string
        description:
          type: string
        avatarIndex:
          type: integer
      required:
        - id
        - title
    Pin:
      type: object
      properties:
        id:
          type: integer
          format: int
        boardID:
          type: integer
          format: int
        title:
          type: string
        description:
          type: string
        imageLink:
          type: string
        relatedTagIDs:
          type: array
          items:
            type: string
      required:
        - id
        - title
        - boardID
        - imageLink
